#Deep Count 

#The built-in len operator outputs the number of top-level elements in a List,
#but not the total number of elements. For this question, your goal is to count
#the total number of elements in a list, including all of the inner lists.

#Define a procedure, deep_count, that takes as input a list, and outputs the
#total number of elements in the list, including all elements in lists that it
#contains.


#For this procedure, you will need a way to test if a value is a list. We have
#provided a procedure, is_list(p) that does this:

def is_list(p):
    return isinstance(p, list)

#It is not necessary to understand how is_list works. It returns True if the
#input is a List, and returns False otherwise.

def deep_count(p):
    l = len(p) #first counting all l cells
    a = 0
    newp = []
    x = True
    while a < len(p):
        element = p[a]
        if is_list(element) == True:
            if p[a] != []:
                migrate = p[a]
                b = 0
                while b < len(migrate):
                    newp.append(migrate[b]) #makes migration of elements in sublist
                    b = b + 1
        a = a + 1
    #print 'first OK', l
    while x == True:
        if newp == []:
            return l
        else:
            var = []
            var = newp.pop()
            l = l + 1
            if is_list(var) == True:
                if var != []:
                    c = 0
                    while c < len(var):
                        newp.append(var[c])
                        c = c + 1
        
print deep_count([1, 2, 3])
#>>> 3

# the empty list still counts as an element of the outer list
print deep_count([1, [], 3])
#>>> 3 

print deep_count([1, [1, 2, [3, 4]]])
#>>> 7

print deep_count([[[[[[[[1, 2, 3]]]]]]]])
#>>> 10