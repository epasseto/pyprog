#Double Gold Star

#Khayyam Triangle

#The French mathematician, Blaise Pascal, who built a mechanical computer in the
#17th century, studied a pattern of numbers now commonly known in parts of the
#world as Pascal's Triangle (it was also previously studied by many Indian,
#Chinese, and Persian mathematicians, and is known by different names in other
#parts of the world).

#The pattern is shown below:

#                    1
#                   1 1
#                  1 2 1
#                 1 3 3 1
#                1 4 6 4 1
#                   ...

 #0 1 2 3 
 #1 3 3 1

#1 4 6 4 1
#0 1 2 3 4

#Each number is the sum of the number above it to the left and the number above
#it to the right (any missing numbers are counted as 0).

#Define a procedure, triangle(n), that takes a number n as its input, and
#returns a list of the first n rows in the triangle. Each element of the
#returned list should be a list of the numbers at the corresponding row in the
#triangle.

def is_palindrome(s):
    a = False
    b = len(s)
    if s == '':
        a = True
        return a
    else:
        if s[0] != s[-1]:
            return a
        else:
            return is_palindrome(s[1:-1])

def triangle(n):
    a = []
    line = 1
    while line <= n:
        if line == 1:
            element = [1]
            a.append(element)
        if line == 2:
            element = [1,1]
            a.append(element)
        if line > 2:
            column = 0
            element = []         
            while column < line:
                #print 'line:', line, 'column:', column
                if column == 0 or column >= line-1:
                    value = 1
                else:
                    antelement = a[line-2]
                    #print 'antelement:', antelement, 'column:',column
                    value = antelement[(column-1)] + antelement[column]
                #print 'column:',column, ' line:', line, 'value:', value
                element.append(value)
                column = column + 1
            a.append(element)
        line = line + 1
    return a

print 'tr0',triangle(0)
#>>> []
print 'tr1',triangle(1)
#>>> [[1]]
print 'tr2',triangle(2)
#>> [[1], [1, 1]]
print 'tr3',triangle(3)
#>>> [[1], [1, 1], [1, 2, 1]]
print 'tr6',triangle(6)
#>>> [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]